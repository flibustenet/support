# Instructions de contrôle du flux : for, if, else, switch et defer
Apprenez à contrôler le flux de votre code avec les conditionnels, boucles, commutateurs et defers.
Summary: Go a une seule structure de boucle, la boucle `for`.

Les auteurs de Go
https://golang.org

## For

Go a une seule structure de boucle, la boucle `for`.

La boucle de base `for` a trois composantes séparées par des points-virgules:

  - La déclaration d'initialisation: exécutée avant la première itération
  - L'expression de condition: évaluée avant chaque itération
  - La déclaration d'aboutissement : exécutée à la fin de chaque itération

Chaque composant étant facultatif.

La déclaration d'initialisation sera souvent une déclaration de variable courte et les
variables ainsi déclarées ne sont visibles que dans le cadre de la déclaration
`for`.

l'Itération de la boucle sera arrêtée une fois que la condition booléenne sera évaluée à `false`.

**Note :** contrairement à d'autres langages comme C, Java ou Javascript il n'y a pas de parenthèses
entourant les trois composantes de la déclaration `for` et les accolades `{ }` sont
toujours exigées.

.play flowcontrol/for.go

## For est le « while » de Go

La déclaration d'initialisation et d'aboutissement sont facultatifs, les `;` deviennent facultatifs.
Le `while` de C est orthographié `for` en Go.

.play flowcontrol/for-is-gos-while.go

## Infini

Si vous omettez la condition de la boucle, elle boucle à l'infini, donc une boucle infinie s'écrit concisément.

.play flowcontrol/forever.go

On sort d'une boucle avec `break`, `goto` ou `return` (voir plus bas)

On continue une boucle avec `continue`

## If avec une déclaration courte

Comme `for`, l'instruction `if`  peut commencer par une brève déclaration à exécuter avant la condition.

Les variables déclarées dans la déclaration ont seulement une portée jusqu'à la fin de l' `if`.

(Essayez d'utiliser `v` lors de la dernière instruction `return`.)

.play flowcontrol/if-with-a-short-statement.go

## If et else

Les variables déclarées dans une instruction courte `if` sont également disponibles dans
n'importe lequel des blocs `else`.

(Les deux appels à `pow` retournent leurs résultats avant que l'appel à `fmt.Println`
dans `main` ne commence.)

.play flowcontrol/if-and-else.go

## Exercice do while

*Exercice : Ecrire l'équivalent d'un `do while`*

.play flowcontrol/do_while_ex.go

## Commutateur (Switch)

L'instruction `switch` exécute le premier cas dont la valeur est égale à l'expression de condition.
Il n'y a donc pas besoin de `break` en fin de `case`.
En revanche il est possible d'utiliser l'instruction `fallthrough` pour continuer sur le cas suivant sans le tester.

> Le commutateur de Go est comme celui de C, C ++, Java, JavaScript et PHP,
sauf que Go n'exécute que le cas sélectionné, pas tous les cas qui suivent.
En effet, l'instruction `break` qui est nécessaire à la fin de chaque cas dans ces
langages est fourni automatiquement dans Go.
Une autre différence importante est que les commutateurs de Go n'ont pas besoin
d'être des constantes et les valeurs impliquées n'ont pas besoin d'être des entiers.


Comme `for` et `if`, `switch` peut commencer par une brève déclaration à exécuter avant la condition (facultative).

Les variables de la déclaration ont une portée jusqu'à la fin du `switch` uniquement.

.play flowcontrol/switch.go

## Ordre d'évaluation du Commutateur

Le commutateur évalue les cas de haut en bas, en s'arrêtant quand un cas correspond.

(Par exemple,

	switch i {
	case 0:
	case f():
	}

n'appelle pas `f` si `i==0`.)

Une liste de valeur ou même d'expressions peut également être utilisée.

.play flowcontrol/switch-evaluation-order.go
.play flowcontrol/switch-exp-order.go

## Commutateur sans condition

Un commutateur sans condition a la même signification que `switch true`.

Cette construction peut permettre d'écrire élégamment de longues chaînes if-then-else.

.play flowcontrol/switch-with-no-condition.go

## Break, Goto ou Return

Il existe trois moyens de sortir d'une boucle (`for`) ou d'un bloc (`if`, `switch`, `{}`) avant la fin.

- `return` sort de la fonction
- `break` sort du bloc, continue en fin de bloc
- `goto label` sort du bloc et continue au niveau du label

.play flowcontrol/goto.go

## Defer

Une déclaration `defer` reporte l'exécution d'une fonction jusqu'à ce que la fonction environnante
retourne.

Les arguments de l'appel différé sont évalués immédiatement, mais l'appel de fonction
n'est pas exécuté jusqu'à ce que la fonction environnante retourne.

.play flowcontrol/defer.go

## Defers empilés

Les appels de fonction différés sont poussés sur une pile. Quand une fonction retourne, ses
appels différés sont exécutées dans l'ordre dernier entré, premier sorti.

Pour en savoir plus sur les déclarations `defer` lire cet
[article de blog](https://blog.golang.org/defer-panic-and-recover).

.play flowcontrol/defer-multi.go

## Récap instructions

.play flowcontrol/flow-recap.go
.play flowcontrol/flow_ex.go
